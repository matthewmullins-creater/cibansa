"""
Django settings for cibansa project.

Generated by 'django-admin startproject' using Django 1.11.
Updated for Django 5.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


import os
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'ax63jw!ryvkv2^om_-ml$x9_%-8bx@a0wvi8egu1olcd-se3bt')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('1', 'true', 'yes')

# Allow configuring hosts via env: space or comma separated
_allowed = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1')
if ',' in _allowed:
    ALLOWED_HOSTS = [h.strip() for h in _allowed.split(',') if h.strip()]
else:
    ALLOWED_HOSTS = [h.strip() for h in _allowed.split() if h.strip()]


# Application definition

INSTALLED_APPS = [
    'grappelli',
    'filebrowser',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'widget_tweaks',
    'tinymce',
    'django_cleanup',
    "accounts",
    "main",
    "articles",
    "courses",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'social_django.middleware.SocialAuthExceptionMiddleware',  # Temporarily commented out
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cibansa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'cibansa.wsgi.application'


AUTH_USER_MODEL ="accounts.User"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'accounts.backends.EmailAuthBackend',
]

SESSION_EXPIRE_AT_BROWSER_CLOSE =False


SOCIAL_AUTH_FACEBOOK_KEY = "414407242287298"
SOCIAL_AUTH_FACEBOOK_SECRET = "b07fa11b5cdc88bab357bac84eda74f3"
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email',]
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
  'fields': 'id, name, email'
}

#
# SOCIAL_AUTH_TWITTER_KEY = '5Fv32SSQ4D3A6QANTMB0OL0l1'
# SOCIAL_AUTH_TWITTER_SECRET = 'qkfUQZRCQ1HiRWbXYFehPQmBWRmrzzYz6ul3OsyrG8lLNX9Mma'

SOCIAL_AUTH_LINKEDIN_OAUTH2_KEY = '81q4r6843ldfoc'
SOCIAL_AUTH_LINKEDIN_OAUTH2_SECRET = 'y7huYwBbWlvYDXpN'
SOCIAL_AUTH_LINKEDIN_OAUTH2_SCOPE = ['r_basicprofile', 'r_emailaddress',"w_share"]
# Add the fields so they will be requested from linkedin.
SOCIAL_AUTH_LINKEDIN_OAUTH2_FIELD_SELECTORS = ['email-address','positions','summary', 'headline', 'industry','location','public-profile-url']
# Arrange to add the fields to UserSocialAuth.extra_data
SOCIAL_AUTH_LINKEDIN_OAUTH2_EXTRA_DATA = [('id', 'id'),
                                   ('firstName', 'first_name'),
                                   ('lastName', 'last_name'),
                                   ('emailAddress', 'email_address'),
                                   ('location','location'),
                                   ('summary','summary'),
                                   ('public-profile-url','public-profile-url')]


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '23391481973-hp7q84s5bjboqlafi67p496ng4kiak44.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = "3XLX_-qPRcFMceYZKezi7SRT"
GOOGLE_GEOCODE_API_KEY="AIzaSyAumPEW2If9WA63ERMFobZlN8Vy8ra_Nl0"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Database
# 1) If DATABASE_URL is provided (eg from docker-compose or hosting) use dj_database_url
# 2) Otherwise allow explicit postgres env vars or fall back to sqlite3
if os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'), conn_max_age=600)
    }
else:
    default_engine = os.environ.get('DATABASE_ENGINE', 'django.db.backends.sqlite3')
    if default_engine == 'django.db.backends.sqlite3':
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
            }
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': default_engine,
                'NAME': os.environ.get('DATABASE_NAME', 'cibansa'),
                'USER': os.environ.get('DATABASE_USER', ''),
                'PASSWORD': os.environ.get('DATABASE_PASSWORD', ''),
                'HOST': os.environ.get('DATABASE_HOST', 'localhost'),
                'PORT': os.environ.get('DATABASE_PORT', '5432'),
            }
        }

# Commented out PostgreSQL configuration
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'cibansa',
#         'USER': 'CODE-WIZARD',
#         'PASSWORD': '',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
#  }

# Comment out Heroku database configuration for development
# db_from_env = dj_database_url.config(conn_max_age=500)
# DATABASES['default'].update(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

#Local host setting
# PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#
# STATIC_ROOT = '/static/'
# STATIC_URL = '/static/'
#
# # Extra places for collectstatic to find static files.
# STATICFILES_DIRS = (
#     os.path.join(PROJECT_ROOT, 'static'),
# )

# STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Heroku configuration
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)

MEDIA_ROOT = os.path.join(BASE_DIR,"media/")
MEDIA_URL = '/media/'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

CONTACT_FORM_EMAIL = "info@boilingfrogs.in"

EMAIL_HOST = 'smtp.gmail.com'

EMAIL_HOST_USER = 'boilingfrogs2015@gmail.com'

EMAIL_HOST_PASSWORD = '12iso*help'

EMAIL_PORT = 465

EMAIL_USE_SSL = True


TINYMCE_JS_URL = "/static/main/js/tinymce/tinymce.min.js"
TINYMCE_JS_ROOT = "/static/main/js/tinymce"
TINYMCE_EXTRA_MEDIA = {
    # 'css': {
    #     'all': [
    #         ...
    #     ],
    # },
    'js': [
        "/static/main/js/tinymce/custom-config.js",
        "/static/selectable/js/jquery.dj.selectable.js?v=1.1.0dev",
    ],

}
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    # 'DEFAULT_PAGINATION_CLASS': 'main.core.pagination.LinkHeaderPagination',
    'PAGE_SIZE': 10
}

TINYMCE_DEFAULT_CONFIG = {
    "editor_deselector": "mceNoEditor",

}



